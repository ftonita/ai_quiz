import React, { useEffect, useState, useRef } from 'react';

function QuizPage({ user, token }) {
  const [question, setQuestion] = useState(null);
  const [selected, setSelected] = useState(null);
  const [submitting, setSubmitting] = useState(false);
  const [answered, setAnswered] = useState(false);
  const [timer, setTimer] = useState(0);
  const [result, setResult] = useState(null);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [questionCount, setQuestionCount] = useState(0);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const prevCurrentQuestion = useRef(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  useEffect(() => {
    setIsAuthenticated(!!token && !!user);
  }, [token, user]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
  const fetchQuestion = async () => {
    try {
      const response = await fetch('/api/room/question');
      const q = await response.json();
      if (q.question) {
        setQuestion(q.question);
        setSelected(null);
        setSubmitting(false);
        setAnswered(false);
        setResult(null);
        setShowResult(false);
      }
    } catch (error) {
      console.error('Error fetching question:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const fetchResults = async () => {
    try {
      const response = await fetch('/api/room/leaderboard');
      const results = await response.json();
      const userResult = results.find(r => r.name === user);
      if (userResult) {
        setScore(userResult.score);
      }
    } catch (error) {
      console.error('Error fetching results:', error);
    }
  };

  useEffect(() => {
    let ws = null;
    let wsConnected = false;
    
    const connectWebSocket = () => {
      try {
        const wsProtocol = window.location.protocol === "https:" ? "wss" : "ws";
        const wsHost = window.location.host;
        const wsUrl = `${wsProtocol}://${wsHost}/ws/room`;
        console.log('Attempting WebSocket connection in QuizPage to', wsUrl);
        ws = new WebSocket(wsUrl);
        
        ws.onopen = () => {
          console.log('‚úÖ WebSocket connected in QuizPage');
          wsConnected = true;
        };
        
        ws.onmessage = (e) => {
          try {
            const data = JSON.parse(e.data);
            console.log('üì® WebSocket message in QuizPage:', data);
            setTimer(data.timer);
            setQuestionCount(data.question_count || 0);
            // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            if (data.current_question !== prevCurrentQuestion.current) {
              setCurrentQuestion(data.current_question || 0);
              prevCurrentQuestion.current = data.current_question;
              fetchQuestion();
            }
            // –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ pause, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (data.stage === 'pause') {
              setShowResult(true);
              fetchResults();
            }
          } catch (error) {
            console.error('‚ùå WebSocket message error in QuizPage:', error);
          }
        };
        
        ws.onerror = (error) => {
          console.error('‚ùå WebSocket error in QuizPage:', error);
          wsConnected = false;
        };
        
        ws.onclose = (event) => {
          console.log('üîå WebSocket disconnected in QuizPage. Code:', event.code, 'Reason:', event.reason);
          wsConnected = false;
          setTimeout(connectWebSocket, 5000);
        };
      } catch (error) {
        console.error('‚ùå Failed to create WebSocket in QuizPage:', error);
        wsConnected = false;
      }
    };
    
    connectWebSocket();
    
    // Fallback: –µ—Å–ª–∏ WebSocket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º API polling –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const fallbackInterval = setInterval(() => {
      if (!wsConnected) {
        fetch('/api/room')
          .then(res => res.json())
          .then(data => {
            setTimer(data.timer);
            setQuestionCount(data.question_count || 0);
            if (data.current_question !== prevCurrentQuestion.current) {
              setCurrentQuestion(data.current_question || 0);
              prevCurrentQuestion.current = data.current_question;
              fetchQuestion();
            }
          })
          .catch(error => {
            console.error('‚ùå API fallback error:', error);
          });
      }
    }, 5000);
    
    return () => {
      if (ws) {
        ws.close();
      }
      clearInterval(fallbackInterval);
    };
  }, [user]);

  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    fetchQuestion();
  }, []);

  const handleAnswer = async (idx) => {
    if (submitting || answered || !isAuthenticated) return;
    
    setSelected(idx);
    setSubmitting(true);
    
    try {
      const res = await fetch('/api/room/answer', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ answer: idx })
      });
      
      if (res.ok) {
        setResult('–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!');
        setAnswered(true);
        setSubmitting(false);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        fetchResults();
      } else {
        const data = await res.json();
        setResult(data.detail || '–û—à–∏–±–∫–∞');
        setSubmitting(false);
        setSelected(null);
      }
    } catch (error) {
      console.error('Error submitting answer:', error);
      setResult('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      setSubmitting(false);
      setSelected(null);
    }
  };

  if (!question || !question.text || questionCount === 0)
    return (
      <div style={{ maxWidth: 480, margin: '40px auto', fontFamily: 'sans-serif', fontSize: 22, textAlign: 'center' }}>
        –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã...
      </div>
    );

  return (
    <div style={{ maxWidth: 480, margin: '40px auto', fontFamily: 'sans-serif' }}>
      <div style={{ fontSize: 16, color: '#888', marginBottom: 8 }}>
        {questionCount > 0 ? `–í–æ–ø—Ä–æ—Å ${currentQuestion + 1} –∏–∑ ${questionCount}` : '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã...'}
      </div>
      <div style={{ fontSize: 18, color: '#888', marginBottom: 8 }}>{question.theme}</div>
      <div style={{ fontSize: 24, fontWeight: 700, marginBottom: 16 }}>{question.text}</div>
      <div style={{ fontSize: 32, fontWeight: 700, marginBottom: 24 }}>
        ‚è∞ {timer} —Å–µ–∫
      </div>
      
      {!isAuthenticated && (
        <div style={{ 
          background: '#fff3cd', 
          border: '1px solid #ffeaa7', 
          borderRadius: 8, 
          padding: 16, 
          marginBottom: 16,
          textAlign: 'center',
          color: '#856404'
        }}>
          ‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ú–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å.
        </div>
      )}
      
      <div>
        {question.options.map((opt, i) => {
          const isSelected = selected === i;
          const isDisabled = submitting || answered || !isAuthenticated;
          const isCorrect = answered && isSelected;
          
          return (
            <button
              key={i}
              onClick={() => handleAnswer(i)}
              disabled={isDisabled}
              style={{
                display: 'block',
                width: '100%',
                marginBottom: 12,
                padding: 16,
                fontSize: 18,
                borderRadius: 8,
                border: isSelected ? '2px solid #007bff' : '1px solid #ccc',
                background: isSelected ? '#e6f0ff' : '#fff',
                color: '#222',
                cursor: isDisabled ? 'not-allowed' : 'pointer',
                transition: 'all 0.2s',
                opacity: isDisabled && !isSelected ? 0.6 : 1,
                transform: isSelected ? 'scale(1.02)' : 'scale(1)'
              }}
            >
              {opt}
              {submitting && isSelected && ' ‚úì'}
            </button>
          );
        })}
      </div>
      {result && (
        <div style={{ marginTop: 16, fontSize: 18, color: '#007bff', textAlign: 'center' }}>
          {result}
        </div>
      )}
      {showResult && isAuthenticated && (
        <div style={{ marginTop: 8, fontSize: 18, color: '#007bff', textAlign: 'center' }}>
          –í–∞—à–∏ –±–∞–ª–ª—ã: {score}
        </div>
      )}
      <div style={{ fontSize: 13, color: '#888', marginTop: 16, textAlign: 'center' }}>
        {isAuthenticated ? '–ï—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç–µ ‚Äî 0 –±–∞–ª–ª–æ–≤' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'}
      </div>
    </div>
  );
}

export default QuizPage; 