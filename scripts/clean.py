#!/usr/bin/env python3
import os
import sys
import subprocess
import shutil
from pathlib import Path

def clean_docker():
    """–û—á–∏—â–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã"""
    print("üê≥ –û—á–∏—Å—Ç–∫–∞ Docker...")
    try:
        subprocess.run(["docker-compose", "down", "--rmi", "all", "-v"], check=False)
        print("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Docker: {e}")

def clean_frontend():
    """–û—á–∏—â–∞–µ—Ç node_modules –∏ build –ø–∞–ø–∫–∏ frontend"""
    print("üì¶ –û—á–∏—Å—Ç–∫–∞ frontend...")
    frontend_dir = Path("frontend")
    
    dirs_to_remove = ["node_modules", "dist", ".vite"]
    for dir_name in dirs_to_remove:
        dir_path = frontend_dir / dir_name
        if dir_path.exists():
            shutil.rmtree(dir_path)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}")

def clean_backend():
    """–û—á–∏—â–∞–µ—Ç __pycache__ –ø–∞–ø–∫–∏ backend"""
    print("üêç –û—á–∏—Å—Ç–∫–∞ backend...")
    backend_dir = Path("backend")
    
    for pycache in backend_dir.rglob("__pycache__"):
        shutil.rmtree(pycache)
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {pycache}")
    
    for pyc_file in backend_dir.rglob("*.pyc"):
        pyc_file.unlink()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {pyc_file}")

def clean_scripts():
    """–û—á–∏—â–∞–µ—Ç __pycache__ –ø–∞–ø–∫–∏ scripts"""
    print("üîß –û—á–∏—Å—Ç–∫–∞ scripts...")
    scripts_dir = Path("scripts")
    
    for pycache in scripts_dir.rglob("__pycache__"):
        shutil.rmtree(pycache)
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {pycache}")

def main():
    print("üßπ AI Quiz Platform - Cleanup")
    print("=" * 50)
    
    clean_docker()
    clean_frontend()
    clean_backend()
    clean_scripts()
    
    print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 